---
title: "Class17"
author: "Anyoleth Alarcon A17347293"
format: pdf
toc: true
---

## Downstream analysis

Back on our laptop we can now use R and Bioconductor tools to further explore this large scale dataset.

For example there is an R function called tximport() in the tximport package, which enables straightforward import of Kallisto results

With each sample having its own directory containing the Kallisto output, we can import the transcript count estimates into R using:

```{r}
# BiocManager::install("tximport")
```

```{r}
library(tximport)
```

```{r}
dir <- "C:/Users/anyol/OneDrive/bimm143/class17/quant_results"
list.files(dir)
```

```{r}
folders <- list.files(path = dir, pattern = "SRR21568*")
samples <- sub("_quant", "", folders)
files <- file.path(dir, folders, "abundance.h5")
names(files) <- samples

txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
```

```{r}
head(txi.kallisto$counts)
```

> Q. How many transcripts for each sample?

```{r}
colSums(txi.kallisto$counts)
```

> Q. How many transcripts are detected in at least one sample?

```{r}
sum(rowSums(txi.kallisto$counts)>0)
```

Might want to filter the ones with no reads:

```{r}
to_keep <- rowSums(txi.kallisto$counts) > 0
kset_nonzero <- txi.kallisto$counts[to_keep,]
```

```{r}
keep2 <- apply(kset_nonzero,1,sd)>0
kk <- kset_nonzero[keep2,]

head(kk)
```

## PCA (Principal Component Analysis)

Now we compute the principal components, centering and scaling each transcriptâ€™s measured levels so that each feature contributes equally to the PCA:

```{r}
pca <- prcomp(t(kk), scale=T)

summary(pca)
```

Now can use the first two principal components as a coordinate system for visualizing the summarized transcriptomic profiles of each sample:

```{r}
plot(pca$x[,1], pca$x[,2],
     col=c("blue","blue","red","red"),
     xlab="PC1", ylab="PC2", pch=16)
```

> Q. Use ggplot to make a similar figure of PC1 vs PC2 and a separate figure PC1 vs PC3 and PC2 vs PC3.

```{r}
library(ggplot2)
library(ggrepel)
```

```{r}
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC2, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
ggplot(y) +
  aes(PC1, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
ggplot(y) +
  aes(PC2, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```


## Differiental-expression analysis

We can use DESeq2 to complete the differential-expression analysis that we are already familiar with:

```{r}
library(DESeq2)
```

```{r}
sampleTable <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)
```

```{r}
dds <- DESeqDataSetFromTximport(txi.kallisto,
                                sampleTable, 
                                ~condition)
```

`dds` is now ready for `DESeq()`.

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```


