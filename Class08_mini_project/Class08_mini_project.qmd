---
title: "Class08_Mini_Project"
author: "Anyoleth Alarcon"
format: pdf
toc: true
---

## Background

This source provides materials for a class mini-project focused on unsupervised learning analysis of human breast cancer cell data. Students will conduct principal component analysis (PCA) for dimensionality reduction and then apply hierarchical and k-means clustering techniques. The project involves exploratory data analysis, interpreting PCA results, evaluating clustering performance by comparing cluster assignments to actual diagnoses, and optionally combining PCA with clustering. The goal is to identify potential groupings within the cell data based on their characteristics without prior knowledge of malignancy, and the project concludes with an application of the PCA model to classify new patient samples.

## Data Import

Our data came from the U. of Wisconsin Medical Center

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
```

> Q1. How many patients/samples are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

> Q3. How many variables/features in the data are suffixed with `_mean` ?

```{r}
colnames(wisc.df)
```
> That listed them but did not say how many. Let's try again.

```{r}

length(grep("mean", colnames(wisc.df), value = TRUE))
```

There is a diagnosis column that is the clinician consensus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis.

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering

Let's try a `hclust()`
```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather bad dendrogram/tree with the `cutree()` 

```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster?

```{r}
table(grps)
```

```{r}
table(diagnosis)
```

We can generate a cross-table that compares our cluster `grps` vector with our `diagnosis` vector values

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis

### The importance data scaling

The main function for PCA in base R is `prcomp()` it has a default input parameter of `scale=FALSE`.

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

We could do a PCA of this data as is and it could be mis-leading...

Let's look at the mean value of each column and standard deviation

```{r}
colMeans(mtcars)
```

```{r}
apply(mtcars, 2, sd)
```

We can "scale" this data before PCA to get a much better representation and analysis of all the columns.

```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (aka score plot, orientation plot, or PC1 vs PC2 plot). The "loadings plot" is how the original variables contribute to the new PCs.

A loadings plot of the unscaled PCA results
```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

Loadings plot of the scaled data.
```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```
PC plot of scaled PCA results

```{r}
library(ggrepel)

ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) +
  geom_point() +
  geom_text_repel()
```

> **Key Point**: In general we will set `scale=TRUE` when we do PCA. This is not the default but probably should be...


We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint: we do!

## PCA of wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

TO see how well PCA is doing here in terms of capturing the variance (or spread) in the data we can use the `summary()` function. 

```{r}
summary(wisc.pr)
```

Let's make the main PC1 vs PC2

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)") +
  ylab("PC2 (19%)")
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

```{r}
summary(wisc.pr)$importance[2,1]
```

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

Answer: To describe at least 70%, need 3.

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

Answer: To describe at least 90%, need 7


## Interpreting PCA Results

Create a biplot of the `wisc.pr` using the `biplot()` function.

```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

Answer: Row names are used as plotting characters. Plot is difficult to understand, too much going on.

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Scatter plot observations by components 1 and 3
plot(wisc.pr$x[, c(1, 3)], col = diagnosis,
     xlab = "PC1", ylab = "PC3")
```
Answer: Plots have more clearer separation of malignant and benign samples.


### Communicating PCA Results


> Q9. For the first principal component, what is the component of the loading vector (i.e. `wisc.pr$rotation[,1]`) for the feature `concave.points_mean`?

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data? 

```{r}
cumul_var <- summary(wisc.pr)$importance[3,]
cumul_var
```
Answer: 5 principal components.

## 5. Combining Methods

We can take our PCA results and use them as a basis set for other analysis such as clustering.

### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust(dist( wisc.pr$x[,1:2]), method="ward.D2")
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups):

```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```

How do my cluster grps compare to the diagnosis?

```{r}
table(diagnosis, pc.grps)
```

```{r}
table(diagnosis)
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses? 

Newly created model with four clusters does a reasonably good job of separating the two diagnoses.

> Q16. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the `table()` function to compare the output of the model `wisc.hclust.clusters` with the vector containing the actual diagnoses.

```{r}
table(pc.grps, diagnosis)
```

They did real bad. We do much better after PCA - the new PCA variables (what we call a basis set) give us much better separation of M and B

## 7. Prediction

We can use our PCA model for the analysis of the new "unseen" data. In this case from U. Mich.

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

>Q18. WHich of these new patients should we prioritize for follow up? (make `ggplot`)

```{r}
plot(wisc.pr$x[,1:2], col=as.factor(grps)
     )
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

Patient 1 is clustered more in the black which represents malignant samples, so they should be prioritized.