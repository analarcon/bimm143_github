---
title: "Class 14: RNASeq mini-project"
author: "Anyoleth Alarcon A17347293"
format: pdf
toc: true
---

Here we will perform a complete RNASeq analysis from counts to pathways and biological interpretation.

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.

# Required packages

```{r, message=FALSE}
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(pathview)
library(gage)
library(gageData)
```

# Data import

```{r}
colData <- read.csv("GSE37704_metadata.csv", row.names = 1)
countData <- read.csv("GSE37704_featurecounts.csv", row.names = 1)

head(colData)
head(countData)
```

# Tidy counts
Check the correspondance of colData rows and countData columns.

```{r}
rownames(colData)
```

```{r}
colnames(countData)
```
Remove the troublesome first column so we march the metadata

```{r}
counts <- countData[,-1]
```

```{r}
head(counts)
```

```{r}
rownames(colData) == colnames(counts)
```

```{r}
all(rownames(colData) == colnames(counts))
```

# Remove zero count genes

We will have rows in `counts` for genes that we can not say anything about because they have zero expression in the particular tissue we are looking at. 

```{r}
head(counts)
```

If the `rowSums()` is zero then give a name (i.e. row) has no count data and we should exclude these genes from further consideration.

```{r}
to.keep <- rowSums(counts) != 0
cleancounts <- counts[to.keep,]
```

> Q. How many genes do we have left?

```{r}
nrow(cleancounts)
```

# Setup DESeq object for analysis

```{r}
dds <- DESeqDataSetFromMatrix(countData = cleancounts,
                              colData = colData,
                              design = ~condition)
```

# Run DESeq analysis

```{r}
dds <- DESeq(dds)
```

# Extract the results

```{r}
res <- results(dds)
head(res)
```

# Add Gene annotation

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(x = org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL")
head(res)
```


```{r}
res$name <- mapIds(x = org.Hs.eg.db,
                   keys = rownames(res),
                   keytype = "ENSEMBL",
                   column = "GENENAME")

res$entrez <- mapIds(x = org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")
head(res)         
```

# Save my results to a CSV file

```{r}
write.csv(res, file = "results.csv")
```

# Result Visualization

```{r}
mycols <- rep("gray", nrow(res))
mycols[ res$log2FoldChange <= -2 ] <- "blue" 
mycols[ res$log2FoldChange >= 2 ] <- "blue" 
mycols[ res$padj >= 0.5 ] <- "gray"

plot(res$log2FoldChange, -log(res$padj), col= mycols) +
  abline(v=-2, col="red")
abline(v=+2, col="red")
abline(h=-log(0.05), col="red")
```

```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)
```

```{r}
kegg.sets.hs <- kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```
```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez
head(foldchanges)
```

```{r}
keggres <- gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
head(keggres$less)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

> Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
keggrespathways2 <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids2 <- substr(keggrespathways2, start=1, stop=8)
keggresids2
pathview(gene.data=foldchanges, pathway.id=keggresids2, species="hsa")
```
!(hsa04110.pathview.png)

# Section 3 Ontology

We can also do a similar procedure with gene ontology. Similar to above, go.sets.hs has all GO terms. go.subs.hs is a named list containing indexes for the BP, CC, and MF ontologies. Letâ€™s focus on BP (a.k.a Biological Process) here.

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

# Section 4: Reactome Analysis

Reactome is database consisting of biological molecules and their relation to pathways and processes.

First, Using R, output the list of significant genes at the 0.05 level as a plain text file:

```{r}
siggenes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(siggenes)))
```

```{r}
write.table(siggenes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

!("images/PathwaysOverview.png")


